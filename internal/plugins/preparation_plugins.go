package plugins

import "github.com/fadyat/ggt/internal"

type PreparationPlugin interface {
	// PatchFields changes the format of struct fields, for further custom testing logic.
	// This is useful when the struct fields are interfaces, but we need to use concrete types.
	PatchFields([]*internal.Identifier) []*internal.Identifier

	// --------------------------------------------------------
	//
	// pluggable preparation function													*
	//
	// 	  testcases := []struct {
	//        ...
	//
	//        {{- if .Struct }}
	//    	  fields fields {{ generics_args .Generics }}
	//    	  {{- end }}
	//
	//        ...
	//    }{

	// PrepareFields([]*internal.Identifier) []string todo: determine format of fn

	// --------------------------------------------------------
	//
	// struct_creation 	( pluggable to support preparation / different creation techs )	*
	//
	//     {{- if .Struct }}
	//     {{ .Receiver.Name }} := {{ .Struct.Name }}{
	//         {{- range .Struct.Fields }}
	//         {{ .Name }}: tt.fields.{{ .Name }},
	//         {{- end }}
	//     }
	//     {{ end }}
}

func withPreparationPlugins(fn *internal.Fn, plugins []PreparationPlugin) []*internal.Identifier {
	var fields = fn.Struct.Fields
	for _, plugin := range plugins {
		fields = plugin.PatchFields(fields)
	}

	return fields
}

type corePreparationPlugin struct{}

func (c *corePreparationPlugin) PatchFields(fields []*internal.Identifier) []*internal.Identifier {
	return fields
}

// mockeryPreparationPlugin is a plugin, which replaces the interface fields with the concrete types,
// which are generated by the mockery tool.
type mockeryPreparationPlugin struct {

	// assumed that interfaces are written at the point of use,
	// so the set contains only interfaces from the current package
	packageInterfacesSet map[string]struct{}
}

func (m *mockeryPreparationPlugin) PatchFields(fields []*internal.Identifier) []*internal.Identifier {
	for _, field := range fields {
		if _, ok := m.packageInterfacesSet[field.Type]; ok {
			field.Type = "*mocks." + field.Type
		}
	}

	return fields
}

func newPreparationPlugins() []PreparationPlugin {
	return []PreparationPlugin{
		&corePreparationPlugin{},
		&mockeryPreparationPlugin{
			packageInterfacesSet: map[string]struct{}{
				"PreparationPlugin": {},
			},
		},
	}
}
